from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ObjectDoesNotExist
from django.db import models
import os
from .level import LevelSetting


class CustomUser(AbstractUser):
    email_confirmed = models.BooleanField(default=False)
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    social_network_link = models.URLField(null=True, blank=True)

    xp = models.PositiveIntegerField(default=0, verbose_name="–û–ø—ã—Ç")
    level = models.PositiveIntegerField(default=1, verbose_name="–£—Ä–æ–≤–µ–Ω—å")

    quiz_completed = models.BooleanField(default=False)
    recommended_tags = models.ManyToManyField('webapp.Tag', blank=True, related_name='recommended_users')

    def save(self, *args, **kwargs):
        try:
            old_user = CustomUser.objects.get(pk=self.pk)
            if old_user.avatar and old_user.avatar != self.avatar:
                if os.path.isfile(old_user.avatar.path):
                    os.remove(old_user.avatar.path)
        except CustomUser.DoesNotExist:
            pass
        super().save(*args, **kwargs)

    def get_xp_for_next_level(self):
        """–ü–æ–ª—É—á–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –æ–ø—ã—Ç–∞ –Ω—É–∂–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        try:
            next_level = self.level + 1
            setting = LevelSetting.objects.get(level=next_level)
            return setting.xp_required
        except ObjectDoesNotExist:
            return None  # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–µ—Ä–Ω–µ—Ç—Å—è None

    def add_experience(self, course_id: int, lesson_id: int, xp_amount: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—ã—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è/–∫—É—Ä—Å–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å."""
        from webapp.models import Lesson, LessonProgress

        self.xp += xp_amount
        level_up_messages = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–¥—É–ª—è
        lesson = Lesson.objects.get(id=lesson_id)
        module = lesson.module
        course = module.course

        completed_lessons_in_module = LessonProgress.objects.filter(
            user=self, lesson__module=module, status="done"
        ).count()
        total_lessons_in_module = module.lessons.count()

        if completed_lessons_in_module == total_lessons_in_module:
            self.xp += 50
            level_up_messages.append(f"üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –º–æ–¥—É–ª—å '{module.title}' –∏ –ø–æ–ª—É—á–∏–ª–∏ +50 XP!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
        completed_lessons_in_course = LessonProgress.objects.filter(
            user=self, lesson__module__course=course, status="done"
        ).count()
        total_lessons_in_course = Lesson.objects.filter(module__course=course).count()

        if completed_lessons_in_course == total_lessons_in_course:
            self.xp += 100
            level_up_messages.append(f"üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å '{course.title}' –∏ –ø–æ–ª—É—á–∏–ª–∏ +100 XP!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        while True:
            xp_needed = self.get_xp_for_next_level()
            if xp_needed is None or self.level >= 25:
                break  # –ï—Å–ª–∏ —É—Ä–æ–≤–Ω–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º, –≤—ã—Ö–æ–¥–∏–º

            if self.xp >= xp_needed:
                self.xp -= xp_needed
                self.level += 1
                level_up_messages.append(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {self.level}!")
            else:
                break  # –ï—Å–ª–∏ –æ–ø—ã—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è

        self.save()
        xp_left = self.get_xp_for_next_level() - self.xp if self.get_xp_for_next_level() else 0

        return "\n".join(level_up_messages) if level_up_messages else f"–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å {xp_left} –æ–ø—ã—Ç–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è."

    def get_user_discount(self):
        discount_levels = {
            (5, 9): 2,
            (10, 14): 4,
            (15, 19): 6,
            (20, 25): 8,
        }

        discount = next((d for (low, high), d in discount_levels.items() if low <= self.level <= high), 0)

        return discount

    def get_level_color(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        level_colors = {
            1: "#B0BEC5, #78909C",  # –°–µ—Ä—ã–π
            2: "#CFD8DC, #90A4AE",  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
            3: "#ECEFF1, #B0BEC5",  # –°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π
            4: "#FFECB3, #FFD54F",  # –ñ–µ–ª—Ç–æ–≤–∞—Ç—ã–π
            5: "#64DD17, #1B5E20",  # –ó–µ–ª–µ–Ω—ã–π
            6: "#AEEA00, #76FF03",  # –õ–∞–π–º–æ–≤—ã–π
            7: "#00E676, #00C853",  # –ò–∑—É–º—Ä—É–¥–Ω—ã–π
            8: "#1DE9B6, #00BFA5",  # –ë–∏—Ä—é–∑–æ–≤—ã–π
            9: "#00E5FF, #00B8D4",  # –ì–æ–ª—É–±–æ–π
            10: "#2979FF, #0D47A1",  # –°–∏–Ω–∏–π
            11: "#304FFE, #1A237E",  # –ò–Ω–¥–∏–≥–æ
            12: "#3D5AFE, #283593",  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
            13: "#6200EA, #311B92",  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            14: "#AA00FF, #6200EA",  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
            15: "#D500F9, #9C27B0",  # –†–æ–∑–æ–≤–∞—Ç–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            16: "#F50057, #C51162",  # –†–æ–∑–æ–≤—ã–π
            17: "#FF1744, #D50000",  # –ö—Ä–∞—Å–Ω—ã–π
            18: "#FF6F00, #E65100",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            19: "#FF9100, #FF6D00",  # –Ø–Ω—Ç–∞—Ä–Ω—ã–π
            20: "#FFC400, #FFAB00",  # –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
            21: "#FFD600, #FFEA00",  # –ñ–µ–ª—Ç—ã–π
            22: "#AEEA00, #76FF03",  # –õ–∞–π–º (–ø–æ–≤—Ç–æ—Ä, –Ω–æ —è—Ä—á–µ)
            23: "#64DD17, #1B5E20",  # –ì–ª—É–±–æ–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
            24: "#00C853, #009624",  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
            25: "#00E676, #00C853",  # –£–ª—å—Ç—Ä–∞-—è—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π (—Ç–æ–ø–æ–≤—ã–π)
        }

        return level_colors.get(self.level, "#FF9800, #FF5722")  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
